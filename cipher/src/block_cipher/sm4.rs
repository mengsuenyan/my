use crate::{BlockDecrypt, BlockEncrypt, CipherError};
use utils::Block;

/// [sm4](http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html)
#[derive(Clone)]
pub struct SM4 {
    rk: [u32; 32],
}

impl SM4 {
    const SBOX: [u8; 256] = [
        0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c,
        0x05, 0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86,
        0x06, 0x99, 0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed,
        0xcf, 0xac, 0x62, 0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa,
        0x75, 0x8f, 0x3f, 0xa6, 0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c,
        0x19, 0xe6, 0x85, 0x4f, 0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb,
        0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25,
        0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52,
        0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38,
        0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, 0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34,
        0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, 0x1d, 0xf6, 0xe2, 0x2e, 0x82,
        0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, 0xd5, 0xdb, 0x37, 0x45,
        0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, 0x8d, 0x1b, 0xaf,
        0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, 0x0a, 0xc1,
        0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, 0x89,
        0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
        0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39,
        0x48,
    ];

    const FK: [u32; 4] = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc];

    const CK: [u32; 32] = [
        0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd,
        0xc4cbd2d9, 0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81,
        0x888f969d, 0xa4abb2b9, 0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45,
        0x4c535a61, 0x686f767d, 0x848b9299, 0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
        0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279,
    ];

    const BLOCK_SIZE: usize = 16;
    const KEY_SIZE: usize = 16;

    #[inline]
    fn f_tau(x: u32) -> u32 {
        let y = x.to_be_bytes();
        let s = [
            Self::SBOX[y[0] as usize],
            Self::SBOX[y[1] as usize],
            Self::SBOX[y[2] as usize],
            Self::SBOX[y[3] as usize],
        ];
        u32::from_be_bytes(s)
    }

    #[inline]
    fn f_l(x: u32) -> u32 {
        x ^ x.rotate_left(2) ^ x.rotate_left(10) ^ x.rotate_left(18) ^ x.rotate_left(24)
    }

    #[inline]
    fn round_f(x0: u32, x1: u32, x2: u32, x3: u32, rk: u32) -> u32 {
        x0 ^ Self::f_l(Self::f_tau(x1 ^ x2 ^ x3 ^ rk))
    }

    #[inline]
    fn f_lb(x: u32) -> u32 {
        x ^ x.rotate_left(13) ^ x.rotate_left(23)
    }

    fn key_schedule(mk: [u32; 4]) -> SM4 {
        let mut k = [0u32; 36];
        k[0] = mk[0] ^ Self::FK[0];
        k[1] = mk[1] ^ Self::FK[1];
        k[2] = mk[2] ^ Self::FK[2];
        k[3] = mk[3] ^ Self::FK[3];

        let mut rk = [0u32; 32];
        for (i, x) in rk.iter_mut().enumerate() {
            k[i + 4] = k[i] ^ Self::f_lb(Self::f_tau(k[i + 1] ^ k[i + 2] ^ k[i + 3] ^ Self::CK[i]));
            *x = k[i + 4];
        }

        SM4 { rk }
    }

    pub fn from_slice(key: &[u8]) -> Result<SM4, CipherError> {
        if key.len() != Self::BLOCK_SIZE {
            Err(CipherError::InvalidKeySize {
                real: key.len(),
                target: Some(Self::BLOCK_SIZE),
            })
        } else {
            Ok(Self::new(Block::to_arr_uncheck(key)))
        }
    }

    pub fn new(key: [u8; Self::KEY_SIZE]) -> SM4 {
        let mut mk = [0u32; 4];
        for (x, k) in mk.iter_mut().zip(key.chunks_exact(4)) {
            *x = u32::from_be_bytes(Block::to_arr_uncheck(k))
        }
        Self::key_schedule(mk)
    }

    fn cipher_inner(
        &self,
        data: &[u8; Self::BLOCK_SIZE],
        is_decrypt: bool,
    ) -> [u8; Self::BLOCK_SIZE] {
        let mut x = [0u32; 36];
        x[0] = u32::from_be_bytes([data[0], data[1], data[2], data[3]]);
        x[1] = u32::from_be_bytes([data[4], data[5], data[6], data[7]]);
        x[2] = u32::from_be_bytes([data[8], data[9], data[10], data[11]]);
        x[3] = u32::from_be_bytes([data[12], data[13], data[14], data[15]]);

        if is_decrypt {
            for i in 0..32 {
                x[i + 4] = Self::round_f(x[i], x[i + 1], x[i + 2], x[i + 3], self.rk[31 - i]);
            }
        } else {
            for i in 0..32 {
                x[i + 4] = Self::round_f(x[i], x[i + 1], x[i + 2], x[i + 3], self.rk[i]);
            }
        }

        let mut data = [0u8; Self::BLOCK_SIZE];
        for (i, d) in x.into_iter().rev().take(4).enumerate() {
            let (i, d) = (i << 2, d.to_be_bytes());
            data[i] = d[0];
            data[i + 1] = d[1];
            data[i + 2] = d[2];
            data[i + 3] = d[3];
        }

        data
    }
}

impl BlockEncrypt<16> for SM4 {
    fn encrypt_block(&self, plaintext: &[u8; Self::BLOCK_SIZE]) -> [u8; 16] {
        self.cipher_inner(plaintext, false)
    }
}

impl BlockDecrypt<16> for SM4 {
    fn decrypt_block(&self, ciphertext: &[u8; 16]) -> [u8; 16] {
        self.cipher_inner(ciphertext, true)
    }
}

#[cfg(test)]
mod tests {
    use crate::block_cipher::SM4;
    use crate::{BlockDecrypt, BlockEncrypt};

    #[test]
    fn sm4() {
        // (text, key, ciphertxt, nums)
        let cases = [
            (
                [
                    0x01u8, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76,
                    0x54, 0x32, 0x10,
                ],
                [
                    0x01u8, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76,
                    0x54, 0x32, 0x10,
                ],
                [
                    0x68u8, 0x1e, 0xdf, 0x34, 0xd2, 0x06, 0x96, 0x5e, 0x86, 0xb3, 0xe9, 0x4f, 0x53,
                    0x6e, 0x42, 0x46,
                ],
                1usize,
            ),
            (
                [
                    0x01u8, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76,
                    0x54, 0x32, 0x10,
                ],
                [
                    0x01u8, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76,
                    0x54, 0x32, 0x10,
                ],
                [
                    0x59, 0x52, 0x98, 0xc7, 0xc6, 0xfd, 0x27, 0x1f, 0x04, 0x02, 0xf8, 0x04, 0xc3,
                    0x3d, 0x3f, 0x66,
                ],
                1_000_000usize,
            ),
        ];

        for (i, (msg, key, cmsg, rounds)) in cases.into_iter().enumerate() {
            let sm4 = SM4::new(key);
            let mut pt = msg;

            for _ in 0..rounds {
                pt = sm4.encrypt_block(&pt);
            }

            assert_eq!(cmsg, pt, "case {i} encrypt failed");

            let mut ct = cmsg;
            for _ in 0..rounds {
                ct = sm4.decrypt_block(&ct);
            }

            assert_eq!(msg, ct, "case {i} decrypt failed");
        }
    }
}
