//! RFC 7914: The scrypt Password-Based Key Derivation Function
//!
//! 特点: 基于memory-hard函数, 抗算力并行化;
//!

use crate::kdf::pbkdf::PBKDF2;
use crate::prf::HMAC;
use crate::{CipherError, KDF};
use crypto_hash::sha2::SHA256;
use num_bigint::BigUint;
use utils::Block;

#[derive(Clone)]
pub struct Scrypt {
    password: Vec<u8>,
    salt: Vec<u8>,
    // block size
    r: usize,
    // CPU/memory成本参数, n = 2^x , x > 0, x < 128 * r / 8
    n: usize,
    // 并行化参数, <= (2^32 - 1)*32 / (128 * r)
    p: usize,
}

impl Scrypt {
    /// `cpu_mem_cost`: cpu比mem成本参数
    pub fn new(
        password: Vec<u8>,
        salt: Vec<u8>,
        cpu_mem_cost: usize,
        parallelization: usize,
        block_size: usize,
    ) -> Result<Self, CipherError> {
        if cpu_mem_cost == 1 || !cpu_mem_cost.is_power_of_two() {
            return Err(CipherError::Other(
                "cpu memory cost must great than 1 and is the power of 2".to_string(),
            ));
        } else if block_size == 0 {
            return Err(CipherError::Other(
                "block size must great than 1".to_string(),
            ));
        } else if parallelization > (u32::MAX as usize / (4 * block_size)) {
            return Err(CipherError::Other(format!(
                "parallelization parameter must less than {}",
                u32::MAX as usize / (4 * block_size)
            )));
        }

        Ok(Self {
            password,
            salt,
            r: block_size,
            p: parallelization,
            n: cpu_mem_cost,
        })
    }

    #[inline]
    const fn r(a: u32, b: u32) -> u32 {
        ((a) << (b)) | ((a) >> (32 - (b)))
    }

    fn salsa20(in_data: [u32; 16]) -> [u32; 16] {
        let (mut x, mut out_data) = (in_data, in_data);
        for _ in 0..4 {
            x[4] ^= Self::r(x[0].wrapping_add(x[12]), 7);
            x[8] ^= Self::r(x[4].wrapping_add(x[0]), 9);
            x[12] ^= Self::r(x[8].wrapping_add(x[4]), 13);
            x[0] ^= Self::r(x[12].wrapping_add(x[8]), 18);
            x[9] ^= Self::r(x[5].wrapping_add(x[1]), 7);
            x[13] ^= Self::r(x[9].wrapping_add(x[5]), 9);
            x[1] ^= Self::r(x[13].wrapping_add(x[9]), 13);
            x[5] ^= Self::r(x[1].wrapping_add(x[13]), 18);
            x[14] ^= Self::r(x[10].wrapping_add(x[6]), 7);
            x[2] ^= Self::r(x[14].wrapping_add(x[10]), 9);
            x[6] ^= Self::r(x[2].wrapping_add(x[14]), 13);
            x[10] ^= Self::r(x[6].wrapping_add(x[2]), 18);
            x[3] ^= Self::r(x[15].wrapping_add(x[11]), 7);
            x[7] ^= Self::r(x[3].wrapping_add(x[15]), 9);
            x[11] ^= Self::r(x[7].wrapping_add(x[3]), 13);
            x[15] ^= Self::r(x[11].wrapping_add(x[7]), 18);
            x[1] ^= Self::r(x[0].wrapping_add(x[3]), 7);
            x[2] ^= Self::r(x[1].wrapping_add(x[0]), 9);
            x[3] ^= Self::r(x[2].wrapping_add(x[1]), 13);
            x[0] ^= Self::r(x[3].wrapping_add(x[2]), 18);
            x[6] ^= Self::r(x[5].wrapping_add(x[4]), 7);
            x[7] ^= Self::r(x[6].wrapping_add(x[5]), 9);
            x[4] ^= Self::r(x[7].wrapping_add(x[6]), 13);
            x[5] ^= Self::r(x[4].wrapping_add(x[7]), 18);
            x[11] ^= Self::r(x[10].wrapping_add(x[9]), 7);
            x[8] ^= Self::r(x[11].wrapping_add(x[10]), 9);
            x[9] ^= Self::r(x[8].wrapping_add(x[11]), 13);
            x[10] ^= Self::r(x[9].wrapping_add(x[8]), 18);
            x[12] ^= Self::r(x[15].wrapping_add(x[14]), 7);
            x[13] ^= Self::r(x[12].wrapping_add(x[15]), 9);
            x[14] ^= Self::r(x[13].wrapping_add(x[12]), 13);
            x[15] ^= Self::r(x[14].wrapping_add(x[13]), 18);
        }

        out_data
            .iter_mut()
            .zip(x)
            .for_each(|(a, b)| *a = a.wrapping_add(b));
        out_data
    }

    // b' = b0 || b1
    fn block_mix(blocks: &[[u32; 16]], b0: &mut Vec<[u32; 16]>, b1: &mut Vec<[u32; 16]>) {
        b0.clear();
        b1.clear();

        let mut x = *blocks.last().unwrap();
        for (i, block) in blocks.iter().enumerate() {
            x.iter_mut().zip(block.iter()).for_each(|(a, &b)| {
                *a ^= b;
            });
            x = Self::salsa20(x);

            if i & 0x1 == 0 {
                b0.push(x);
            } else {
                b1.push(x);
            }
        }
    }

    // cpu_mem_cost * parall * block_size * 128
    pub fn estimate_memory_using(
        cpu_mem_cost: usize,
        parallelization: usize,
        block_size: usize,
    ) -> usize {
        cpu_mem_cost * parallelization * block_size * 128
    }

    fn rom_mix(n: usize, data: &[u8]) -> Vec<u8> {
        let mut b = Vec::with_capacity(data.len() / 64);
        data.chunks_exact(64).for_each(|chunk| {
            let mut block = [0u32; 16];
            block
                .iter_mut()
                .zip(chunk.chunks_exact(4))
                .for_each(|(a, b)| {
                    *a = u32::from_le_bytes(Block::to_arr_uncheck(b));
                });
            b.push(block);
        });

        let (mut v, mut b0, mut b1) = (
            Vec::with_capacity(n),
            Vec::with_capacity((1 + b.len()) >> 1),
            Vec::with_capacity((1 + b.len()) >> 1),
        );
        v.push(b);
        for _ in 0..n {
            let x = v.last().unwrap();
            Self::block_mix(x.as_slice(), &mut b0, &mut b1);
            let mut buf = Vec::with_capacity(data.len() / 64);
            buf.append(&mut b0);
            buf.append(&mut b1);
            v.push(buf);
        }

        let mut x = v.last().unwrap().clone();
        for _ in 0..n {
            let j = x
                .last()
                .unwrap()
                .iter()
                .flat_map(|x| x.to_le_bytes())
                .collect::<Vec<_>>();
            let j = BigUint::from_bytes_le(j.as_slice()) % n;
            let j = j.iter_u64_digits().next().unwrap_or_default();
            x.iter_mut().zip(v[j as usize].iter()).for_each(|(a, b)| {
                a.iter_mut().zip(b.iter()).for_each(|(c, &d)| *c ^= d);
            });
            Self::block_mix(x.as_slice(), &mut b0, &mut b1);
            x.clear();
            x.append(&mut b0);
            x.append(&mut b1);
        }

        x.into_iter()
            .flat_map(|x| {
                x.into_iter()
                    .flat_map(|x| x.to_le_bytes())
                    .collect::<Vec<_>>()
            })
            .collect()
    }
}

impl KDF for Scrypt {
    fn max_key_size(&self) -> usize {
        // 密钥派生长度, <= (2^32 - 1) * 32
        (u32::MAX as usize - 1) * 32
    }

    fn kdf(self, key_size: usize) -> Result<Vec<u8>, CipherError> {
        let prf = HMAC::new(SHA256::new(), vec![])?;
        let kdf = PBKDF2::new(prf.clone(), self.password.clone(), self.salt, 1)?;
        let b = kdf.kdf(self.p * 128 * self.r)?;
        let mut bo = Vec::with_capacity(b.len());
        for chunk in b.chunks_exact(128 * self.r) {
            bo.extend(Self::rom_mix(self.n, chunk));
        }

        let kdf = PBKDF2::new(prf, self.password, bo, 1)?;
        kdf.kdf(key_size)
    }
}

#[cfg(test)]
mod tests {
    use utils::Block;

    use crate::KDF;

    use super::Scrypt;

    #[test]
    fn salsa20() {
        let i = vec![
            0x7eu8, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71,
            0x8f, 0x26, 0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11,
            0x6d, 0xcd, 0x3b, 0x1d, 0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12,
            0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32, 0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
            0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e,
        ];
        let o = vec![
            0xa4u8, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c,
            0xef, 0x05, 0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63,
            0x96, 0x68, 0x2f, 0x29, 0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b,
            0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba, 0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
            0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
        ];

        let mut b = Vec::with_capacity(i.len() / 64);
        i.chunks_exact(64).for_each(|chunk| {
            let mut block = [0u32; 16];
            block
                .iter_mut()
                .zip(chunk.chunks_exact(4))
                .for_each(|(a, b)| {
                    *a = u32::from_le_bytes(Block::to_arr_uncheck(b));
                });
            b.push(block);
        });

        for (x, tgt) in b.into_iter().zip(o.chunks_exact(64)) {
            let y = Scrypt::salsa20(x)
                .into_iter()
                .map(|x| x.to_le_bytes())
                .flatten()
                .collect::<Vec<_>>();
            assert_eq!(y, tgt);
        }
    }

    #[test]
    fn block_mix() {
        let i = [
            0xf7u8, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12,
            0xff, 0xdd, 0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae,
            0x2d, 0x0f, 0x6f, 0xad, 0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b,
            0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29, 0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
            0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7, 0x89, 0x49, 0x91, 0x44, 0x72, 0x13,
            0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb, 0xcd, 0x98, 0x43, 0x80,
            0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0, 0x67, 0xd2,
            0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
            0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf,
            0x7e, 0x89,
        ];
        let o = [
            0xa4u8, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c,
            0xef, 0x05, 0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63,
            0x96, 0x68, 0x2f, 0x29, 0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b,
            0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba, 0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
            0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81, 0x20, 0xed, 0xc9, 0x75, 0x32, 0x38,
            0x81, 0xa8, 0x05, 0x40, 0xf6, 0x4c, 0x16, 0x2d, 0xcd, 0x3c, 0x21, 0x07, 0x7c, 0xfe,
            0x5f, 0x8d, 0x5f, 0xe2, 0xb1, 0xa4, 0x16, 0x8f, 0x95, 0x36, 0x78, 0xb7, 0x7d, 0x3b,
            0x3d, 0x80, 0x3b, 0x60, 0xe4, 0xab, 0x92, 0x09, 0x96, 0xe5, 0x9b, 0x4d, 0x53, 0xb6,
            0x5d, 0x2a, 0x22, 0x58, 0x77, 0xd5, 0xed, 0xf5, 0x84, 0x2c, 0xb9, 0xf1, 0x4e, 0xef,
            0xe4, 0x25,
        ];

        let mut b = Vec::with_capacity(i.len() / 64);
        i.chunks_exact(64).for_each(|chunk| {
            let mut block = [0u32; 16];
            block
                .iter_mut()
                .zip(chunk.chunks_exact(4))
                .for_each(|(a, b)| {
                    *a = u32::from_le_bytes(Block::to_arr_uncheck(b));
                });
            b.push(block);
        });

        let (mut b0, mut b1) = (vec![], vec![]);
        Scrypt::block_mix(b.as_slice(), &mut b0, &mut b1);
        b0.append(&mut b1);
        let b = b0
            .into_iter()
            .map(|x| {
                x.into_iter()
                    .map(|x| x.to_le_bytes())
                    .flatten()
                    .collect::<Vec<_>>()
            })
            .flatten()
            .collect::<Vec<_>>();
        assert_eq!(b, o);
    }

    #[test]
    fn rom_mix() {
        let i = [
            0xf7u8, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12,
            0xff, 0xdd, 0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae,
            0x2d, 0x0f, 0x6f, 0xad, 0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b,
            0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29, 0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
            0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7, 0x89, 0x49, 0x91, 0x44, 0x72, 0x13,
            0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb, 0xcd, 0x98, 0x43, 0x80,
            0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0, 0x67, 0xd2,
            0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
            0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf,
            0x7e, 0x89,
        ];
        let o = [
            0x79u8, 0xcc, 0xc1, 0x93, 0x62, 0x9d, 0xeb, 0xca, 0x04, 0x7f, 0x0b, 0x70, 0x60, 0x4b,
            0xf6, 0xb6, 0x2c, 0xe3, 0xdd, 0x4a, 0x96, 0x26, 0xe3, 0x55, 0xfa, 0xfc, 0x61, 0x98,
            0xe6, 0xea, 0x2b, 0x46, 0xd5, 0x84, 0x13, 0x67, 0x3b, 0x99, 0xb0, 0x29, 0xd6, 0x65,
            0xc3, 0x57, 0x60, 0x1f, 0xb4, 0x26, 0xa0, 0xb2, 0xf4, 0xbb, 0xa2, 0x00, 0xee, 0x9f,
            0x0a, 0x43, 0xd1, 0x9b, 0x57, 0x1a, 0x9c, 0x71, 0xef, 0x11, 0x42, 0xe6, 0x5d, 0x5a,
            0x26, 0x6f, 0xdd, 0xca, 0x83, 0x2c, 0xe5, 0x9f, 0xaa, 0x7c, 0xac, 0x0b, 0x9c, 0xf1,
            0xbe, 0x2b, 0xff, 0xca, 0x30, 0x0d, 0x01, 0xee, 0x38, 0x76, 0x19, 0xc4, 0xae, 0x12,
            0xfd, 0x44, 0x38, 0xf2, 0x03, 0xa0, 0xe4, 0xe1, 0xc4, 0x7e, 0xc3, 0x14, 0x86, 0x1f,
            0x4e, 0x90, 0x87, 0xcb, 0x33, 0x39, 0x6a, 0x68, 0x73, 0xe8, 0xf9, 0xd2, 0x53, 0x9a,
            0x4b, 0x8e,
        ];

        let b = Scrypt::rom_mix(16, i.as_slice());
        assert_eq!(b, o);
    }

    #[test]
    fn scrypt() {
        // password, salt, n, r, p, keylen, key
        let cases = [
            (
                "",
                "",
                16,
                1,
                1,
                64,
                vec![
                    0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20, 0x3b, 0x19, 0xca, 0x42, 0xc1,
                    0x8a, 0x04, 0x97, 0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8, 0xdf, 0xdf,
                    0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42, 0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48,
                    0xf8, 0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17, 0xe8, 0xd3, 0xe0, 0xfb,
                    0x2e, 0x0d, 0x36, 0x28, 0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06,
                ],
            ),
            (
                "password",
                "NaCl",
                1024,
                8,
                16,
                64,
                vec![
                    0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00, 0x78, 0x56, 0xe7, 0x19, 0x0d,
                    0x01, 0xe9, 0xfe, 0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30, 0xe7, 0x73,
                    0x76, 0x63, 0x4b, 0x37, 0x31, 0x62, 0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3,
                    0x88, 0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda, 0xc7, 0x27, 0xaf, 0xb9,
                    0x4a, 0x83, 0xee, 0x6d, 0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40,
                ],
            ),
            (
                "pleaseletmein",
                "SodiumChloride",
                16384,
                8,
                1,
                64,
                vec![
                    0x70, 0x23, 0xbd, 0xcb, 0x3a, 0xfd, 0x73, 0x48, 0x46, 0x1c, 0x06, 0xcd, 0x81,
                    0xfd, 0x38, 0xeb, 0xfd, 0xa8, 0xfb, 0xba, 0x90, 0x4f, 0x8e, 0x3e, 0xa9, 0xb5,
                    0x43, 0xf6, 0x54, 0x5d, 0xa1, 0xf2, 0xd5, 0x43, 0x29, 0x55, 0x61, 0x3f, 0x0f,
                    0xcf, 0x62, 0xd4, 0x97, 0x05, 0x24, 0x2a, 0x9a, 0xf9, 0xe6, 0x1e, 0x85, 0xdc,
                    0x0d, 0x65, 0x1e, 0x40, 0xdf, 0xcf, 0x01, 0x7b, 0x45, 0x57, 0x58, 0x87,
                ],
            ),
            (
                "pleaseletmein",
                "SodiumChloride",
                1048576,
                8,
                1,
                64,
                vec![
                    0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae, 0xad, 0xdb, 0xbe, 0x09, 0xcf,
                    0x70, 0xf8, 0x81, 0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d, 0xab, 0xe5,
                    0xee, 0x98, 0x20, 0xad, 0xaa, 0x47, 0x8e, 0x56, 0xfd, 0x8f, 0x4b, 0xa5, 0xd0,
                    0x9f, 0xfa, 0x1c, 0x6d, 0x92, 0x7c, 0x40, 0xf4, 0xc3, 0x37, 0x30, 0x40, 0x49,
                    0xe8, 0xa9, 0x52, 0xfb, 0xcb, 0xf4, 0x5c, 0x6f, 0xa7, 0x7a, 0x41, 0xa4,
                ],
            ),
        ];

        for (i, (password, salt, n, r, p, klen, tgt)) in cases.into_iter().enumerate() {
            let scrypt = Scrypt::new(
                password.as_bytes().to_vec(),
                salt.as_bytes().to_vec(),
                n,
                p,
                r,
            )
            .unwrap();
            let key = scrypt.kdf(klen).unwrap();
            assert_eq!(key, tgt, "case {i} failed");
        }
    }
}
