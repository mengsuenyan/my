use ark_ec::{
    twisted_edwards::{
        Affine as ArkAffine, MontCurveConfig, Projective as ArkProjective, TECurveConfig,
    },
    CurveConfig,
};
use ark_ff::{Fp448, MontBackend, MontConfig, MontFp};

#[derive(MontConfig)]
#[modulus = "726838724295606890549323807888004534353641360687318060281490199180612328166730772686396383698676545930088884461843637361053498018365439"]
#[generator = "7"]
pub struct FqConfig;
pub type Fq = Fp448<MontBackend<FqConfig, 7>>;

#[derive(MontConfig)]
#[modulus = "181709681073901722637330951972001133588410340171829515070372549795146003961539585716195755291692375963310293709091662304773755859649779"]
#[generator = "2"]
pub struct FrConfig;
pub type Fr = Fp448<MontBackend<FrConfig, 7>>;

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub struct Config;

pub type Affine = ArkAffine<Config>;
pub type Projective = ArkProjective<Config>;

impl CurveConfig for Config {
    const COFACTOR: &'static [u64] = &[4];

    // 8^(-1) mod r
    const COFACTOR_INV: Self::ScalarField = MontFp!("45427420268475430659332737993000283397102585042957378767593137448786500990384896429048938822923093990827573427272915576193438964912445");

    type BaseField = Fq;

    type ScalarField = Fr;
}

// Edwards:
const G_X: Fq = MontFp!("224580040295924300187604334099896036246789641632564134246125461686950415467406032909029192869357953282578032075146446173674602635247710");
const G_Y: Fq = MontFp!("298819210078481492676017930443930673437544040154080242095928241372331506189835876003536878655418784733982303233503462500531545062832660");

impl TECurveConfig for Config {
    const COEFF_A: Self::BaseField = MontFp!("1");
    // -39081
    const COEFF_D: Self::BaseField = MontFp!("726838724295606890549323807888004534353641360687318060281490199180612328166730772686396383698676545930088884461843637361053498018326358");
    const GENERATOR: ArkAffine<Self> = ArkAffine::new_unchecked(G_X, G_Y);
    type MontCurveConfig = Config;
}

impl MontCurveConfig for Config {
    const COEFF_A: Self::BaseField = MontFp!("219156325855878194520066315750274945827319732724511438062460480710924099972282775327170947891745673641066665331824508025757495027081988");
    const COEFF_B: Self::BaseField = MontFp!("219156325855878194520066315750274945827319732724511438062460480710924099972282775327170947891745673641066665331824508025757495027081990");
    type TECurveConfig = Config;
}
