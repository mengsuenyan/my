use ark_ec::{
    short_weierstrass::{Affine as ArkAffine, Projective as ArkProjective, SWCurveConfig},
    CurveConfig,
};
use ark_ff::{Field, Fp576, MontBackend, MontConfig, MontFp};

#[derive(MontConfig)]
#[modulus = "6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151"]
#[generator = "3"]
pub struct FqConfig;
pub type Fq = Fp576<MontBackend<FqConfig, 9>>;

#[derive(MontConfig)]
#[modulus = "6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449"]
#[generator = "3"]
pub struct FrConfig;
pub type Fr = Fp576<MontBackend<FrConfig, 9>>;

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub struct Config;
pub type Affine = ArkAffine<Config>;
pub type Projective = ArkProjective<Config>;

impl CurveConfig for Config {
    const COFACTOR: &'static [u64] = &[0x1];
    const COFACTOR_INV: Self::ScalarField = Fr::ONE;
    type BaseField = Fq;
    type ScalarField = Fr;
}

const G_X: Fq = MontFp!("2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846");
const G_Y: Fq = MontFp!("3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784");

impl SWCurveConfig for Config {
    // -3
    const COEFF_A: Self::BaseField = MontFp!("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148");
    const COEFF_B: Self::BaseField = MontFp!("1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984");
    const GENERATOR: ark_ec::short_weierstrass::Affine<Self> = ArkAffine::new_unchecked(G_X, G_Y);
}
